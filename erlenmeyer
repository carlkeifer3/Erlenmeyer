#!/usr/bin/python

#
#  erlenmeyer
#  Erlenmeyer
#
#  Created by Patrick Perini on February 3, 2013.
#  See readme.md for licensing information.
#

# imports
import jinja2
import optparse

# constants
projectFiles = {
    "flaskProject": "%(directory)s/%(projectName)s.py",
    
    "modelsInit": "%(directory)s/models/__init__.py",
    "modelsModel": "%(directory)s/models/Model.py",
    "modelsModelObject": "%(directory)s/models/%(modelName)s.py",
    
    "handlersInit": "%(directory)s/handlers/__init__.py",
    "handlersModelObjectHandler": "%(directory)s/handlers/%(modelName)Handler.py",
    
    "docsProjectDocs": "%(directory)s/docs/%(projectName)s.html",
    
    "settings": "%(directory)s/settings/settings.json",
    "sqlSettings": "%(directory)s/settings/models.sql"
}

templateFiles = {
    "flaskProject": "project.tmpl.py",
    
    "modelsModel": "models/model.tmpl.py",
    "modelsModelObject": "models/ModelObject.tmpl.py",
    
    "handlersObject": "handlers/ModelObjectHandler.tmpl.py",
    
    "docsProjectDocs": "docs/project.tmpl.html",
    
    "settings": "settings/settings.tmpl.json",
    "sqlSettings": "settings/models.tmpl.sql"
}

# globals
optionParser = optparse.OptionParser(
    user = "usage %prog subcommand [options]\n\nSubcommands:\n  new\n  update"
)

templateEnvironment = jinja2.Environmen(
    loader = jinja2.PackageLoader(__name__, 'templates')
)

# functions
def main():
    (options, args) = optionParser.parse_args()
    
    commandIsMalformed = False
    commandIsMalformed |= (len(args) < 1)
    commandIsMalformed |= (not options.project)
    commandIsMalformed |= (not options.coreDataFile)
    
    if commandIsMalformed:
        optionParser.print_help()
        return
    
    if args[0] == "new":
        newProject(options.project, options.coreDataFile, options.primaryKey)
        
    elif args[0] == "update":
        updateProject(options.project, options.coreDataFile, options.primaryKey)
        
def newProject(project, coreDataFile, primaryKey = "uuid"):
    """
    DOCME
    """
    pass
    
def updateProject(project, coreDataFile, primaryKey = "uuid"):
    """
    DOCME
    """
    pass

# main
if __name__ == "__main__":
    # add options
    optionParser.add_option(
        "-p", "--project", dest = "project",
        help = "Location of the project to manipulate."
    )
    
    optionParser.add_option(
        "-c", "--coredata", dest = "coreDataFile",
        help = "Location of the Core Data xcdatamodeld file."
    )
    
    optionParser.add_option(
        "--primaryKey", dest = "primaryKey",
        default = "uuid", help = "The primary key of all Models. Default to UUID."
    )